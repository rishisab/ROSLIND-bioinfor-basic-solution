#roslind is a open source to get some practice qus based on your capablity or to practice some codes based on rerseach problems.
you can practice a code and try to solve via different sources which help you to build your coding knowldge. 
I personally tried this codes on Spyder(Python 3.9) and im addint the codes here.
Q1. A DNA string were given count the number of each bases present in the given seq.
s= intput("Enter a dna seq").upper()    # taking input from user and converting its to capital letter
s = input("Enter a DNA sequence: ").upper()

if all(base in "ATGC" for base in s):   #to check proper base were entered
    print("Valid DNA sequence entered.")
    
    a_count = 0                      #start the count with 0
    t_count = 0
    g_count = 0
    c_count = 0

    for base in s:
        if base == "A":
            a_count += 1
        elif base == "T":
            t_count += 1
        elif base == "G":
            g_count += 1
        elif base == "C":
            c_count += 1

    print(f" {a_count}   {t_count}   {g_count}   {c_count}")



or we can use the function to solve this code
def base_count(s):                         #defining a function
    A=s.count("A")                         s is our seq input and count is function which help to count this giver attribute(no initialization require)
    T=s.count("T")
    G=s.count("G")
    C=s.count("C")
    return A,T,G,C                         #function output
s = input("Enter a DNA sequence: ").upper()

if all(base in "ATGC" for base in s):
    print("Valid DNA sequence entered.")
    print(base_count(s))
else: 
    print("Invalid DNA sequence. Only A, T, G, C allowed.")



Q2 transcribe the given dna seq.(translate T to U)
s = input("Enter a DNA sequence: ").upper()
trans_rna=s.replace("T","U")
print("translation of seq",s,"is",trans_rna)




Q3 Find the complement and revese compliment of the given string
s = input("Enter a DNA sequence: ").upper()

compliment_dicti={                # creating a dictionary for complimentry bases
    "A":"T",
    "G":"C",
    "T":"A",
    "C":"G"}
complement_seq="".join(compliment_dicti[base]for base in s)   # give comple seq
reverse_seq=s[::-1]                                          #slicing
reverse_comple=complement_seq[::-1]
print("enter seq is: ",s)
print("complement of the given seq is: ",complement_seq)
print("reverse complement of the given seq is: ",reverse_comple)




Q4 find the gc content of the seq
def gc_content(seq):
gc=seq.count("G")+seq.count("C")
return (gc/len(seq))*100 if seq else 0



Q4A find the gc content of entered fasta seqs:
def gc_content(seq):
    gc = seq.count('G') + seq.count('C')
    return (gc / len(seq)) * 100 if seq else 0

def fasta_file (filename):      #not change filename use it as it is

    with open(filename)as f:
        sequence={}
        seq_id=""
        seq_data=""
        for line in f:
            line=line.strip()
            if line.startswith(">"):
                if seq_id:
                    sequence[seq_id]=gc_content(seq_data)
                seq_id=line[1:]
                seq_data=""
            else:
                
               seq_data+= line.upper()
        if seq_id:
            sequence[seq_id]=gc_content(seq_data)
    for id, gc in sequence.items():
        print(f"{id}: GC content={gc:2f}%")
fasta_file(("name of fasta file).fasta")

